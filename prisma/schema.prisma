// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  username  String   @unique
  clerkId   String   @unique
  age       String?
  bio       String?
  image     String?
  location  String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relations
  posts    Post[]
  comments Comment[]
  likes    Like[]

  followers Follow[] @relation("follower")
  following Follow[] @relation("following")

  createdNotifications  Notification[] @relation("createdNotifications")
  recievedNotifications Notification[] @relation("recievedNotifications")

  @@index([createdAt])
  @@index([username])
  @@index([email])
}

enum NotificationType {
  LIKE
  COMMENT
  POST
}

model Notification {
  id   String           @id @default(cuid())
  type NotificationType
  read Boolean          @default(false)

  userId String
  user   User   @relation("createdNotifications", fields: [userId], references: [id], onDelete: Cascade)

  recipientId String
  recipient   User   @relation("recievedNotifications", fields: [recipientId], references: [id], onDelete: Cascade)

  postId String?
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)

  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

model Follow {
  createdAt DateTime @default(now())
  updated   DateTime @updatedAt

  followerId String
  follower   User   @relation("follower", fields: [followerId], references: [id])

  followingId String
  following   User   @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
  @@index([followerId, followingId])
}

model Post {
  id        String   @id @default(cuid())
  content   String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likesCount Int @default(0)

  //relations
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  comments      Comment[]
  likes         Like[]
  notifications Notification[]

  @@index([authorId])
  @@index([createdAt])
  @@index([likesCount])
  @@index([authorId, createdAt])
}

model Comment {
  id        String   @id @default(cuid())
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relations
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  notifications Notification[]

  @@index([authorId])
  @@index([postId, authorId])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relations
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([authorId, postId])
  @@index([authorId, postId])
}
